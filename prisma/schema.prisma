// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String @unique
  password String

  provider   String?
  providerId String?

  userRole UserRole @default(USER)

  verified DateTime

  cart             Cart?
  verificationCode VerificationCode?
  orders           Order[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  variants    ProductVariant[] // items ProductItems[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

// ProductItem
model ProductVariant {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String @unique
  price    Int
  imageUrl String

  products Product[]

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  token String

  items CartItem[]

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int            @unique

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @unique

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user   User? @relation(fields: [userId], references: [id])

  token String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String

  items    Json
  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  code String

  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}
